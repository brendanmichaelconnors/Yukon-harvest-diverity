<<<<<<< HEAD
percentile = "lower")
S_80 <- stack(lapply(Spawners_ScenB, quantile, prob = 0.8, names = FALSE)) %>%
mutate(year = rep(c(1:32),times=8),
population = rep(pop, each = 32),
param = "spawners",
percentile = "upper")
Spawners_ScenB_df <- rbind(S_50, S_20, S_80) %>%
mutate(adj_year = as.numeric(as.character(year))) %>%
select(4,3,7,6,5,1) %>%
spread(key = percentile, value = values) %>%
rename(Spw_low = lower,
Spw_med = median,
Spw_upp = upper) %>%
select(-param)
Spawners_ScenB_df <- Spawners_ScenB_df[1:224,]
Rec_and_Spwn_ScenB <- cbind(Recruits_ScenB_df, Spawners_ScenB_df)
Rec_and_Spwn_ScenB <- Rec_and_Spwn_ScenB[,c(1:6,10:12)]
Rec_and_Spwn_ScenB$BroodYear <- NA
Rec_and_Spwn_ScenB$BroodYear <- rep(c(1982:2009),times=8)
pop <- c("Lower Mainstem", "Stewart", "Pelly", "White-Donjek", "Middle Mainstem", "Carmacks", "Upper Lakes and Mainstem", "Teslin")
# Scenariocomb_posteriors
Recruits_Scencomb <- Post_comb[,354:633]
Spawners_Scencomb <- Post_comb[,98:353]
R_50 <- stack(lapply(Recruits_Scencomb, quantile, prob = 0.5, names = FALSE)) %>%
mutate(year = rep(c(1:35),times=8),
population = rep(pop, each = 35),
param = "recruits",
percentile = "median")
R_20 <- stack(lapply(Recruits_Scencomb, quantile, prob = 0.2, names = FALSE)) %>%
mutate(year = rep(c(1:35),times=8),
population = rep(pop, each = 35),
param = "recruits",
percentile = "lower")
R_80 <- stack(lapply(Recruits_Scencomb, quantile, prob = 0.8, names = FALSE)) %>%
mutate(year = rep(c(1:35),times=8),
population = rep(pop, each = 35),
param = "recruits",
percentile = "upper")
Recruits_Scencomb_df <- rbind(R_50, R_20, R_80) %>%
mutate(adj_year = as.numeric(as.character(year)) - 7) %>%
filter(adj_year > 0) %>%
select(4,3,7,6,5,1) %>%
spread(key = percentile, value = values) %>%
rename(Rec_low = lower,
Rec_med = median,
Rec_upp = upper) %>%
select(-param)
S_50 <- stack(lapply(Spawners_Scencomb, quantile, prob = 0.5, names = FALSE)) %>%
mutate(year = rep(c(1:32),times=8),
population = rep(pop, each = 32),
param = "spawners",
percentile = "median")
S_20 <- stack(lapply(Spawners_Scencomb, quantile, prob = 0.2, names = FALSE)) %>%
mutate(year = rep(c(1:32),times=8),
population = rep(pop, each = 32),
param = "spawners",
percentile = "lower")
S_80 <- stack(lapply(Spawners_Scencomb, quantile, prob = 0.8, names = FALSE)) %>%
mutate(year = rep(c(1:32),times=8),
population = rep(pop, each = 32),
param = "spawners",
percentile = "upper")
Spawners_Scencomb_df <- rbind(S_50, S_20, S_80) %>%
mutate(adj_year = as.numeric(as.character(year))) %>%
select(4,3,7,6,5,1) %>%
spread(key = percentile, value = values) %>%
rename(Spw_low = lower,
Spw_med = median,
Spw_upp = upper) %>%
select(-param)
Spawners_Scencomb_df <- Spawners_Scencomb_df[1:224,]
Rec_and_Spwn_Scencomb <- cbind(Recruits_Scencomb_df, Spawners_Scencomb_df)
Rec_and_Spwn_Scencomb <- Rec_and_Spwn_Scencomb[,c(1:6,10:12)]
Rec_and_Spwn_Scencomb$BroodYear <- NA
Rec_and_Spwn_Scencomb$BroodYear <- rep(c(1982:2009),times=8)
# remove Stewart outlier R/S point
Rec_and_Spwn_Scencomb <- Rec_and_Spwn_Scencomb[c(1:113,115:224),]
# cap Teslin Recruit erorr bar
Rec_and_Spwn_Scencomb[167,6] <- 49999
# cap Teslin Spawner error bar
Rec_and_Spwn_Scencomb[165,9] <- 19999
# View(Rec_and_Spwn_Scencomb)
# head(alpha.beta_A)
# create vector of abundances for each dataframe
sp_YC <- as.vector(seq(0,20,length.out=100))
sp_YlC <- as.vector(seq(0,20,length.out=100))
sp_Ym <- as.vector(seq(0,40,length.out=100))
sp_YP <- as.vector(seq(0,18,length.out=100))
sp_YS <- as.vector(seq(0,25,length.out=100))
sp_YT <- as.vector(seq(0,25,length.out=100))
sp_Yu <- as.vector(seq(0,30,length.out=100))
sp_YWD <- as.vector(seq(0,9,length.out=100))
# repeat substock abundance vector 100 times for each value of alpha and beta
spw_YC <- rep(c(sp_YC),(100))
spw_YlC <- rep(c(sp_YlC),(100))
spw_Ym <- rep(c(sp_Ym),(100))
spw_YP <- rep(c(sp_YP),(100))
spw_YS <- rep(c(sp_YS),(100))
spw_YT <- rep(c(sp_YT),(100))
spw_Yu <- rep(c(sp_Yu),(100))
spw_YWD <- rep(c(sp_YWD),(100))
# combine abundances into single vector
spw_df <- c(spw_YlC, spw_YS, spw_YP, spw_YWD, spw_Ym, spw_YC, spw_Yu, spw_YT)
# add column of abundances to alpha.beta_A dataframe
alpha_A_sample <- alpha.beta_A %>%
select(1:8) %>%
sample_n(100, replace=TRUE)
alpha_A_sample2 <- alpha_A_sample[rep(seq_len(nrow(alpha_A_sample)),each=100),] %>%
mutate(sim = rep(c(1:100), times=100)) %>%
gather(key = alpha, value = alpha_value, alpha_1:alpha_8) %>%
mutate(population = rep(pop,each=10000))
beta_A_sample <- alpha.beta_A %>%
select(9:16) %>%
sample_n(100, replace=TRUE)
beta_A_sample2 <- beta_A_sample[rep(seq_len(nrow(beta_A_sample)),each=100),] %>%
mutate(sim = rep(c(1:100), times=100)) %>%
gather(key = beta, value = beta_value, beta_1:beta_8) %>%
mutate(population = rep(pop,each=10000))
alpha_beta_ScenA_sample <- cbind(alpha_A_sample2, beta_A_sample2)
alpha_beta_ScenA_sample <- alpha_beta_ScenA_sample[,c(4,1,3,7)]
alpha_beta_ScenA_sample$abund <- NA
alpha_beta_ScenA_sample$abund <- spw_df
# shorten dataframe name for simplicity
abScenA_samp <- alpha_beta_ScenA_sample
# add on 'y' value that has the predicted ricker estimates per abundance value
abScenA_samp$y <- NA
abScenA_samp$y <- abScenA_samp$alpha_value*abScenA_samp$abund*exp(-abScenA_samp$beta_value*abScenA_samp$abund)
# head(abScenA_samp)
# 20 and 80 percentiles
alpha_beta_percentileA <- abScenA_samp %>%
group_by(population, abund) %>%
dplyr::summarise(q_20 = quantile(y, probs=0.20),
q_80 = quantile(y, probs=0.8))
# create vector of abundances for each dataframe
sp_YC <- as.vector(seq(0,18,length.out=100))
sp_YlC <- as.vector(seq(0,20,length.out=100))
sp_Ym <- as.vector(seq(0,10,length.out=100))
sp_YP <- as.vector(seq(0,18,length.out=100))
sp_YS <- as.vector(seq(0,20,length.out=100))
sp_YT <- as.vector(seq(0,20,length.out=100))
sp_Yu <- as.vector(seq(0,30,length.out=100))
sp_YWD <- as.vector(seq(0,6,length.out=100))
# repeat substock abundance vector 100 times for each value of alpha and beta
spw_YC <- rep(c(sp_YC),(100))
spw_YlC <- rep(c(sp_YlC),(100))
spw_Ym <- rep(c(sp_Ym),(100))
spw_YP <- rep(c(sp_YP),(100))
spw_YS <- rep(c(sp_YS),(100))
spw_YT <- rep(c(sp_YT),(100))
spw_Yu <- rep(c(sp_Yu),(100))
spw_YWD <- rep(c(sp_YWD),(100))
# combine abundances into single vector
spw_df <- c(spw_YlC, spw_YS, spw_YP, spw_YWD, spw_Ym, spw_YC, spw_Yu, spw_YT)
# add column of abundances to alpha.beta_B dataframe
alpha_B_sample <- alpha.beta_B %>%
select(1:8) %>%
sample_n(100, replace=TRUE)
alpha_B_sample2 <- alpha_B_sample[rep(seq_len(nrow(alpha_B_sample)),each=100),] %>%
mutate(sim = rep(c(1:100), times=100)) %>%
gather(key = alpha, value = alpha_value, alpha_1:alpha_8) %>%
mutate(population = rep(pop,each=10000))
beta_B_sample <- alpha.beta_B %>%
select(9:16) %>%
sample_n(100, replace=TRUE)
beta_B_sample2 <- beta_B_sample[rep(seq_len(nrow(beta_B_sample)),each=100),] %>%
mutate(sim = rep(c(1:100), times=100)) %>%
gather(key = beta, value = beta_value, beta_1:beta_8) %>%
mutate(population = rep(pop,each=10000))
alpha_beta_ScenB_sample <- cbind(alpha_B_sample2, beta_B_sample2)
alpha_beta_ScenB_sample <- alpha_beta_ScenB_sample[,c(4,1,3,7)]
alpha_beta_ScenB_sample$abund <- NA
alpha_beta_ScenB_sample$abund <- spw_df
abScenB_samp <- alpha_beta_ScenB_sample
# add on 'y' value that has the predicted ricker estimates per abundance value
abScenB_samp$y <- NA
abScenB_samp$y <- abScenB_samp$alpha_value*abScenB_samp$abund*exp(-abScenB_samp$beta_value*abScenB_samp$abund)
# 20 and 80 percentiles
alpha_beta_percentileB <- abScenB_samp %>%
group_by(population, abund) %>%
dplyr::summarise(q_20 = quantile(y, probs=0.20),
q_80 = quantile(y, probs=0.8))
pop <- c("Lower Mainstem", "Stewart", "Pelly", "White-Donjek", "Middle Mainstem", "Carmacks", "Upper Lakes and Mainstem", "Teslin")
# create vector of abundances for each dataframe
sp_YC <- as.vector(seq(0,20,length.out=100))
sp_YlC <- as.vector(seq(0,25,length.out=100))
sp_Ym <- as.vector(seq(0,25,length.out=100))
sp_YP <- as.vector(seq(0,25,length.out=100))
sp_YS <- as.vector(seq(0,30,length.out=100))
sp_YT <- as.vector(seq(0,20,length.out=100))
sp_Yu <- as.vector(seq(0,20,length.out=100))
sp_YWD <- as.vector(seq(0,15,length.out=100))
# repeat substock abundance vector 100 times for each value of alpha and beta
spw_YC <- rep(c(sp_YC),(100))
spw_YlC <- rep(c(sp_YlC),(100))
spw_Ym <- rep(c(sp_Ym),(100))
spw_YP <- rep(c(sp_YP),(100))
spw_YS <- rep(c(sp_YS),(100))
spw_YT <- rep(c(sp_YT),(100))
spw_Yu <- rep(c(sp_Yu),(100))
spw_YWD <- rep(c(sp_YWD),(100))
# combine abundances into single vector in correct order
spw_df <- c(spw_YlC, spw_YS, spw_YP, spw_YWD, spw_Ym, spw_YC, spw_Yu, spw_YT)
# add column of abundances to alpha.beta_comb dataframe
alpha_comb_sample <- alpha.beta_comb %>%
select(1:8) %>%
sample_n(100, replace=TRUE)
alpha_comb_sample2 <- alpha_comb_sample[rep(seq_len(nrow(alpha_comb_sample)),each=100),] %>%
gather(key = alpha, value = alpha_value, alpha_1:alpha_8) %>%
mutate(population = rep(pop,each=10000))
beta_comb_sample <- alpha.beta_comb %>%
select(9:16) %>%
sample_n(100, replace=TRUE)
beta_comb_sample2 <- beta_comb_sample[rep(seq_len(nrow(beta_comb_sample)),each=100),] %>%
gather(key = beta, value = beta_value, beta_1:beta_8) %>%
mutate(population = rep(pop,each=10000))
alpha_beta_Scencomb_sample <- cbind(alpha_comb_sample2, beta_comb_sample2)
alpha_beta_Scencomb_sample <- alpha_beta_Scencomb_sample[,c(3,2,5)]
alpha_beta_Scencomb_sample$abund <- NA
alpha_beta_Scencomb_sample$abund <- spw_df*1000
abScencomb_samp <- alpha_beta_Scencomb_sample
# add on 'y' value that has the predicted ricker estimates per abundance value
abScencomb_samp$y <- NA
abScencomb_samp$y <- abScencomb_samp$alpha_value*abScencomb_samp$abund*exp(-abScencomb_samp$beta_value*abScencomb_samp$abund)
# 20 and 80 percentiles
alpha_beta_percentilecomb <- abScencomb_samp %>%
group_by(population, abund) %>%
dplyr::summarise(q_20 = quantile(y, probs=0.20),
q_80 = quantile(y, probs=0.8))
ggplot() +
geom_ribbon(data = alpha_beta_percentileA, aes(x = abund, ymin = q_20, ymax = q_80), fill = "grey80", alpha=0.5, linetype=2, colour="gray46") +
geom_point(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000, color=BroodYear, width=0.9), size=2) +
geom_errorbar(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000,
ymin = Rec_low/1000, ymax = Rec_upp/1000), colour="grey42", width=0.2, size=0.3) +
geom_errorbarh(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000,
xmin = Spw_low/1000, xmax = Spw_upp/1000), colour = "grey42", width=0.2, size = 0.3) +
xlab("Spawners (000s)") +
ylab("Recruits (000s)") +
facet_wrap(~population, ncol=2, scales = "free") +
theme_bw() +
theme(axis.title = element_text(size=12)) +
theme(axis.text = element_text(size=10))
#ggsave(file.path(figure_path, paste("Figure_11.Ricker_ScenA_",system_time,".jpg", sep="")),height = 9, width = 7)
# head(Rec_and_Spwn_ScenA)
# head(alpha_beta_percentileA)
# View(alpha_beta_percentileA)
# View(Rec_and_Spwn_ScenA)
ggplot() +
geom_ribbon(data = alpha_beta_percentileA, aes(x = abund*1000, ymin = q_20, ymax = q_80), fill = "grey80", alpha=0.5, linetype=2, colour="gray46") +
geom_point(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000, color=BroodYear, width=0.9), size=2) +
geom_errorbar(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000,
ymin = Rec_low/1000, ymax = Rec_upp/1000), colour="grey42", width=0.2, size=0.3) +
geom_errorbarh(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000,
xmin = Spw_low/1000, xmax = Spw_upp/1000), colour = "grey42", width=0.2, size = 0.3) +
xlab("Spawners (000s)") +
ylab("Recruits (000s)") +
facet_wrap(~population, ncol=2, scales = "free") +
theme_bw() +
theme(axis.title = element_text(size=12)) +
theme(axis.text = element_text(size=10))
#ggsave(file.path(figure_path, paste("Figure_11.Ricker_ScenA_",system_time,".jpg", sep="")),height = 9, width = 7)
# head(Rec_and_Spwn_ScenA)
# head(alpha_beta_percentileA)
# View(alpha_beta_percentileA)
# View(Rec_and_Spwn_ScenA)
ggplot() +
geom_ribbon(data = alpha_beta_percentileA, aes(x = abund, ymin = q_20, ymax = q_80), fill = "grey80", alpha=0.5, linetype=2, colour="gray46") +
geom_point(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000, color=BroodYear, width=0.9), size=2) +
geom_errorbar(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000,
ymin = Rec_low/1000, ymax = Rec_upp/1000), colour="grey42", width=0.2, size=0.3) +
geom_errorbarh(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000,
xmin = Spw_low/1000, xmax = Spw_upp/1000), colour = "grey42", width=0.2, size = 0.3) +
xlab("Spawners (000s)") +
ylab("Recruits (000s)") +
facet_wrap(~population, ncol=2, scales = "free") +
theme_bw() +
theme(axis.title = element_text(size=12)) +
theme(axis.text = element_text(size=10))
#ggsave(file.path(figure_path, paste("Figure_11.Ricker_ScenA_",system_time,".jpg", sep="")),height = 9, width = 7)
# head(Rec_and_Spwn_ScenA)
# head(alpha_beta_percentileA)
# View(alpha_beta_percentileA)
# View(Rec_and_Spwn_ScenA)
alpha_beta_percentilecomb$population <- factor(alpha_beta_percentilecomb$population, levels = c("Lower Mainstem","Stewart","Pelly",
"White-Donjek","Middle Mainstem",
"Carmacks","Upper Lakes and Mainstem","Teslin"))
Rec_and_Spwn_Scencomb$population <- factor(Rec_and_Spwn_Scencomb$population, levels = c("Lower Mainstem","Stewart","Pelly",
"White-Donjek","Middle Mainstem",
"Carmacks","Upper Lakes and Mainstem","Teslin"))
ggplot() +
geom_ribbon(data = alpha_beta_percentilecomb, aes(x = abund/1000, ymin = q_20/1000, ymax = q_80/1000),
fill = "grey80", alpha=0.5, linetype=2, colour="gray46") +
geom_point(data = Rec_and_Spwn_Scencomb, aes(x= Spw_med/1000, y = Rec_med/1000, color=BroodYear, width=0.9), size=2) +
geom_errorbar(data = Rec_and_Spwn_Scencomb, aes(x= Spw_med/1000, y = Rec_med/1000,
ymin = Rec_low/1000, ymax = Rec_upp/1000), width=0,colour="grey42", width=0.2, size=0.3) +
geom_errorbarh(data = Rec_and_Spwn_Scencomb, aes(x= Spw_med/1000, y = Rec_med/1000,
xmin = Spw_low/1000, xmax = Spw_upp/1000), height=0,colour = "grey42", width=0.2, size = 0.3) +
xlab("Spawners (000s)") +
ylab("Recruits (000s)") +
facet_wrap(~population, ncol=2, scales = "free") +
theme_bw() +
theme(axis.title = element_text(size=12)) +
theme(axis.text = element_text(size=10))
#ggsave(file.path(figure_path, paste("Figure_11.Ricker_ScenCDE",system_time,".jpg", sep="")),height = 9, width = 7)
ggplot() +
geom_ribbon(data = alpha_beta_percentileA, aes(x = abund/1000, ymin = q_20/1000, ymax = q_80/1000), fill = "grey80", alpha=0.5, linetype=2, colour="gray46") +
geom_point(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000, color=BroodYear, width=0.9), size=2) +
geom_errorbar(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000,
ymin = Rec_low/1000, ymax = Rec_upp/1000), colour="grey42", width=0.2, size=0.3) +
geom_errorbarh(data = Rec_and_Spwn_ScenA, aes(x= Spw_med/1000, y = Rec_med/1000,
xmin = Spw_low/1000, xmax = Spw_upp/1000), colour = "grey42", width=0.2, size = 0.3) +
xlab("Spawners (000s)") +
ylab("Recruits (000s)") +
facet_wrap(~population, ncol=2, scales = "free") +
theme_bw() +
theme(axis.title = element_text(size=12)) +
theme(axis.text = element_text(size=10))
#ggsave(file.path(figure_path, paste("Figure_11.Ricker_ScenA_",system_time,".jpg", sep="")),height = 9, width = 7)
# head(Rec_and_Spwn_ScenA)
# head(alpha_beta_percentileA)
# View(alpha_beta_percentileA)
# View(Rec_and_Spwn_ScenA)
ggplot() +
geom_ribbon(data = alpha_beta_percentileB, aes(x = abund/1000, ymin = q_20/1000, ymax = q_80/1000), fill = "grey80", alpha=0.5, linetype=2, colour="gray46") +
geom_point(data = Rec_and_Spwn_ScenB, aes(x= Spw_med/1000, y = Rec_med/1000, color=BroodYear, width=0.9), size=2) +
geom_errorbar(data = Rec_and_Spwn_ScenB, aes(x= Spw_med/1000, y = Rec_med/1000,
ymin = Rec_low/1000, ymax = Rec_upp/1000), colour="grey42", width=0.2, size=0.3) +
geom_errorbarh(data = Rec_and_Spwn_ScenB, aes(x= Spw_med/1000, y = Rec_med/1000,
xmin = Spw_low/1000, xmax = Spw_upp/1000), colour = "grey42", width=0.2, size = 0.3) +
xlab("Spawners (000s)") +
ylab("Recruits (000s)") +
facet_wrap(~population, ncol=2, scales = "free") +
theme_bw() +
theme(axis.title = element_text(size=12)) +
theme(axis.text = element_text(size=10))
#ggsave(file.path(figure_path, paste("Figure_11.Ricker_ScenB",system_time,".jpg", sep="")),height = 9, width = 7)
alpha_beta_percentilecomb$population <- factor(alpha_beta_percentilecomb$population, levels = c("Lower Mainstem","Stewart","Pelly",
"White-Donjek","Middle Mainstem",
"Carmacks","Upper Lakes and Mainstem","Teslin"))
Rec_and_Spwn_Scencomb$population <- factor(Rec_and_Spwn_Scencomb$population, levels = c("Lower Mainstem","Stewart","Pelly",
"White-Donjek","Middle Mainstem",
"Carmacks","Upper Lakes and Mainstem","Teslin"))
ggplot() +
geom_ribbon(data = alpha_beta_percentilecomb, aes(x = abund/1000, ymin = q_20/1000, ymax = q_80/1000),
fill = "grey80", alpha=0.5, linetype=2, colour="gray46") +
geom_point(data = Rec_and_Spwn_Scencomb, aes(x= Spw_med/1000, y = Rec_med/1000, color=BroodYear, width=0.9), size=2) +
geom_errorbar(data = Rec_and_Spwn_Scencomb, aes(x= Spw_med/1000, y = Rec_med/1000,
ymin = Rec_low/1000, ymax = Rec_upp/1000), width=0,colour="grey42", width=0.2, size=0.3) +
geom_errorbarh(data = Rec_and_Spwn_Scencomb, aes(x= Spw_med/1000, y = Rec_med/1000,
xmin = Spw_low/1000, xmax = Spw_upp/1000), height=0,colour = "grey42", width=0.2, size = 0.3) +
xlab("Spawners (000s)") +
ylab("Recruits (000s)") +
facet_wrap(~population, ncol=2, scales = "free") +
theme_bw() +
theme(axis.title = element_text(size=12)) +
theme(axis.text = element_text(size=10))
#ggsave(file.path(figure_path, paste("Figure_11.Ricker_ScenCDE",system_time,".jpg", sep="")),height = 9, width = 7)
# head(alpha_resid_df_A)
alpha_resid_df_A$population <- factor(alpha_resid_df_A$population, levels = c("Lower Mainstem","Stewart","Pelly",
"White-Donjek","Middle Mainstem",
"Carmacks","Upper Lakes and Mainstem","Teslin"))
MyColor <- c("#440154FF","#46337EFF","#365C8DFF","#277F8EFF","#1FA187FF","#4AC16DFF","#9FDA3AFF","#FDE725FF")
ggplot(alpha_resid_df_A, aes(x=year, y = exp(alpha_med) + exp(resid_med), color=population), show.legend = F) +
geom_point(size=1,show.legend = F) +
scale_color_manual(values = viridis(8), name=population) +
geom_line(show.legend = F) +
geom_ribbon(aes(ymin=exp(alpha_lwr) + exp(resid_lwr), ymax= exp(alpha_upr) + exp(resid_upr)), show.legend = F, alpha=0.4) +
scale_color_manual(values = viridis(8)) +
geom_hline(yintercept = 1, lty = "dotted") +
xlab("Brood year") +
ylab("Productivity (Recruits per Spawner)") +
scale_x_continuous(breaks=c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014)) +
#scale_y_continuous(limits=c(-6,6), breaks=c(-6,-3,0,3,6)) +
facet_wrap(~population, nrow=4) +
theme(legend.position = "none") +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust = 1, size=10))
#ggsave(file.path(figure_path, paste("Figure_12.Prod.index_ScenA_",system_time,".jpg", sep="")),height = 9, width = 7)
# head(alpha_resid_df_A)
alpha_resid_df_A$population <- factor(alpha_resid_df_A$population, levels = c("Lower Mainstem","Stewart","Pelly",
"White-Donjek","Middle Mainstem",
"Carmacks","Upper Lakes and Mainstem","Teslin"))
MyColor <- c("#440154FF","#46337EFF","#365C8DFF","#277F8EFF","#1FA187FF","#4AC16DFF","#9FDA3AFF","#FDE725FF")
ggplot(alpha_resid_df_A, aes(x=year, y = exp(alpha_med) + exp(resid_med), color=population), show.legend = F) +
geom_point(size=1,show.legend = F) +
scale_color_manual(values = viridis(8), name=population) +
geom_line(show.legend = F) +
geom_ribbon(aes(ymin=exp(alpha_lwr) + exp(resid_lwr), ymax= exp(alpha_upr) + exp(resid_upr)), show.legend = F, alpha=0.4) +
scale_color_manual(values = viridis(8)) +
geom_hline(yintercept = 1, lty = "dotted") +
xlab("Brood year") +
ylab("Productivity (Recruits per Spawner)") +
scale_x_continuous(breaks=c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014)) +
#scale_y_continuous(limits=c(-6,6), breaks=c(-6,-3,0,3,6)) +
facet_wrap(~population, nrow=4) +
theme(legend.position = "none") +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust = 1, size=10))
#ggsave(file.path(figure_path, paste("Figure_12.Prod.index_ScenA_",system_time,".jpg", sep="")),height = 9, width = 7)
# head(alpha_resid_df_comb)
alpha_resid_df_comb$population <- factor(alpha_resid_df_comb$population, levels = c("Lower Mainstem","Stewart","Pelly",
"White-Donjek","Middle Mainstem",
"Carmacks","Upper Lakes and Mainstem","Teslin"))
# index on log scale
ggplot(alpha_resid_df_comb, aes(x=year, y = log_alpha_med + log_resid_med, color=population), show.legend = F) +
geom_point(size=1,show.legend = F) +
scale_color_manual(values = viridis(8), name=population) +
geom_line(show.legend = F) +
geom_ribbon(aes(ymin= log_alpha_lwr + log_resid_lwr, ymax= log_alpha_upr + log_resid_upr), show.legend = F, alpha=0.4) +
scale_color_manual(values = viridis(8)) +
geom_hline(yintercept = 0, lty = "dotted") +
xlab("Brood year") +
ylab("Productivity index") +
scale_x_continuous(breaks=c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014)) +
#coord_cartesian(ylim = c(0,300)) +
scale_y_continuous(limits=c(-8,8), breaks=c(-8,-4,0,4,8)) +
facet_wrap(~population, nrow=4) +
theme(legend.position = "none") +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust = 1, size=10))
#ggsave(file.path(figure_path, paste("Figure_12.Prod.index_ScencombCDE_",system_time,".jpg", sep="")),height = 9, width = 7)
# productivity on naturalized scle
ggplot(alpha_resid_df_comb, aes(x=year, y = exp(log_alpha_med + log_resid_med), color=population), show.legend = F) +
geom_point(size=1,show.legend = F) +
scale_color_manual(values = viridis(8), name=population) +
geom_line(show.legend = F) +
geom_ribbon(aes(ymin= exp(log_alpha_lwr + log_resid_lwr), ymax= exp(log_alpha_upr + log_resid_upr)), show.legend = F, alpha=0.4) +
scale_color_manual(values = viridis(8)) +
geom_hline(yintercept = 1, lty = "dotted") +
xlab("Brood year") +
ylab("Productivity (Recruits per Spawner)") +
scale_x_continuous(breaks=c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014)) +
coord_cartesian(ylim = c(0,30)) +
#scale_y_continuous(limits=c(-8,8), breaks=c(-8,-4,0,4,8)) +
facet_wrap(~population, nrow=4) +
theme(legend.position = "none") +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust = 1, size=10))
#ggsave(file.path(figure_path, paste("Figure_12.Prod.natural_ScencombCDE_",system_time,".jpg", sep="")),height = 9, width = 7)
# Umsy dataframe
Umsy_A <- ScenarioA_posteriors[,17:24] %>%
sample_n(1000, replace=TRUE) %>%
gather(key = Umsy, value = value, Umsy_1:Umsy_8) %>%
mutate(substock = rep(c("Lower Mainstem", "Stewart", "Pelly","White-Donjek","Middle Mainstem", "Carmacks",
"Upper Lakes and Mainstem", "Teslin"),each=1000))
Umsy_B <- ScenarioB_posteriors[,17:24] %>%
sample_n(1000, replace=TRUE) %>%
gather(key = Umsy, value = value, Umsy_1:Umsy_8) %>%
mutate(substock = rep(c("Lower Mainstem", "Stewart", "Pelly","White-Donjek","Middle Mainstem", "Carmacks",
"Upper Lakes and Mainstem", "Teslin"),each=1000))
Umsy_comb <- Post_comb[,17:24] %>%
sample_n(1000, replace=TRUE) %>%
gather(key = Umsy, value = value, Umsy_1:Umsy_8) %>%
mutate(substock = rep(c("Lower Mainstem", "Stewart", "Pelly","White-Donjek","Middle Mainstem", "Carmacks",
"Upper Lakes and Mainstem", "Teslin"),each=1000))
# Scenario A
Umsy_A$substock <- factor(Umsy_A$substock, levels = c("Lower Mainstem", "Stewart", "Pelly",
"White-Donjek","Middle Mainstem", "Carmacks",
"Upper Lakes and Mainstem", "Teslin"))
ggplot(Umsy_A, aes(x=substock, y=value, fill=substock)) +
geom_boxplot(outlier.shape = NA, size=1.25) +
#coord_flip() +
xlab("Population") +
ylab("U.msy posteriors") +
scale_y_continuous(limits=c(0,1)) +
scale_fill_viridis(option = "viridis", discrete = TRUE) +
theme_classic() +
theme(axis.text.x = element_text(angle=45, hjust=1, size=10))+
theme(axis.text.y = element_text(size=10)) +
theme(axis.title = element_text(size=12)) +
theme(legend.position="none")
#ggsave(file.path(figure_path, paste("Figure_13.Umsy_ScenA_",system_time,".jpg", sep="")),height = 5, width = 7)
# Scenario B
Umsy_comb$substock <- factor(Umsy_comb$substock, levels = c("Lower Mainstem", "Stewart", "Pelly",
"White-Donjek","Middle Mainstem", "Carmacks",
"Upper Lakes and Mainstem", "Teslin"))
ggplot(Umsy_comb, aes(x=substock, y=value*100, fill=substock)) +
geom_boxplot(outlier.shape = NA, size=1.25) +
#coord_flip() +
xlab("Population") +
ylab("Umsy (%)") +
scale_y_continuous(limits=c(0,100)) +
#scale_fill_manual(values = MyColour) +
scale_fill_viridis(option = "viridis", discrete = TRUE) +
theme_classic() +
theme(axis.text.x = element_text(angle=45, hjust=1, size=10))+
theme(axis.text.y = element_text(size=10)) +
theme(axis.title = element_text(size=12)) +
theme(legend.position="none")
#ggsave(file.path(figure_path, paste("Figure_13.Umsy_Scen.comb_",system_time,".jpg", sep="")),height = 5, width = 7)
=======
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1,labels=F)
axis(2,las=2)
mtext("(d) Stocks overfished (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel e - extirpated
xx<-as.table(outcomes.med[,6,]*100)
colnames(xx)<-((t_harvest_rate) )
rownames(xx)<-((BPG/1000) )
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1,labels=F)
axis(2,las=2,labels=F)
mtext("(e) Populations extirpated (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=viridis(100),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel f - CV
xx<-as.table(1/outcomes.med[,9,])
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1,at=c(0,40,80,120,160),labels=F)
axis(2,las=2,labels=F)
mtext("(f) Harvest stability (1/CV)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel g - meet CDN FN needs
xx<-as.table(outcomes.med[,8,]*100)
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1)
axis(2,las=2)
mtext("(g) Chances CDN FN harvest met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel h - meet US sub needs
xx<-as.table(outcomes.med[,7,]*100)
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1)
axis(2,las=2,labels=F)
mtext("(h) Chances US subsistence met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel i - trib goals
xx<-as.table(outcomes.med[,10,]*100)
colnames(xx)<-((t_harvest_rate) )
rownames(xx)<-((BPG/1000) )
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1)
axis(2,las=2, labels = F)
mtext("(i) Chance tributary goals met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.5,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.8,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=3,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
mtext("Escapement goal (000s)",1,outer=T,cex=1.1,lin=0.75)
mtext("Harvest rate on surplus (%)",side=2,outer=T,cex=1.1,line=0.75)
source("Load.R")
# set harvest rate and border passage goals for alternative policies
t_harvest_rate <- seq(0,1,length.out=40) # range of US target commercial harvest rates
BPG <- seq(1,100000,length.out=40) # range of border passage goals
pol.1x<-48750; pol.1x.ind <- which(abs((BPG)-pol.1x)==min(abs((BPG)-pol.1x)))
pol.1y<-0.2; pol.1y.ind <- which(abs((t_harvest_rate)-pol.1y)==min(abs((t_harvest_rate)-pol.1y)))
pol.2x<-50000; pol.2x.ind <- which(abs((BPG)-pol.2x)==min(abs((BPG)-pol.2x)))
pol.2y<-0.98; pol.2y.ind <- which(abs((t_harvest_rate)-pol.2y)==min(abs((t_harvest_rate)-pol.2y)))
pol.3x<-85000; pol.3x.ind <- which(abs((BPG)-pol.3x)==min(abs((BPG)-pol.3x)))
pol.3y<-0.8; pol.3y.ind <- which(abs((t_harvest_rate)-pol.3y)==min(abs((t_harvest_rate)-pol.3y)))
# load simulation output
outcomes <- readRDS("./outputs/base_sims.ricker")
outcomes.med <- apply(outcomes,c(1,2,3),quantile,probs=c(0.5),na.rm=T)
outcomes.upper <- apply(outcomes,c(1,2,3),quantile,probs=c(0.75),na.rm=T)
outcomes.lower <- apply(outcomes,c(1,2,3),quantile,probs=c(0.25),na.rm=T)
# a 40 x 10 x 40 array (BPG x PMs X Target_us_harvest)
pms
source("Load.R")
# set harvest rate and border passage goals for alternative policies
t_harvest_rate <- seq(0,1,length.out=40) # range of US target commercial harvest rates
BPG <- seq(1,100000,length.out=40) # range of border passage goals
pol.1x<-48750; pol.1x.ind <- which(abs((BPG)-pol.1x)==min(abs((BPG)-pol.1x)))
pol.1y<-0.2; pol.1y.ind <- which(abs((t_harvest_rate)-pol.1y)==min(abs((t_harvest_rate)-pol.1y)))
pol.2x<-50000; pol.2x.ind <- which(abs((BPG)-pol.2x)==min(abs((BPG)-pol.2x)))
pol.2y<-0.98; pol.2y.ind <- which(abs((t_harvest_rate)-pol.2y)==min(abs((t_harvest_rate)-pol.2y)))
pol.3x<-85000; pol.3x.ind <- which(abs((BPG)-pol.3x)==min(abs((BPG)-pol.3x)))
pol.3y<-0.8; pol.3y.ind <- which(abs((t_harvest_rate)-pol.3y)==min(abs((t_harvest_rate)-pol.3y)))
# load simulation output
outcomes <- readRDS("./outputs/base_sims.ricker")
outcomes.med <- apply(outcomes,c(1,2,3),quantile,probs=c(0.5),na.rm=T)
outcomes.upper <- apply(outcomes,c(1,2,3),quantile,probs=c(0.75),na.rm=T)
outcomes.lower <- apply(outcomes,c(1,2,3),quantile,probs=c(0.25),na.rm=T)
# a 40 x 10 x 40 array (BPG x PMs X Target_us_harvest)
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("Status quo",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("MSY",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pol.3 <- cbind(rep("Conservation",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.3x.ind,,pol.3y.ind],
outcomes.upper[pol.3x.ind,,pol.3y.ind],
outcomes.lower[pol.3x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
for(i in 3:5){pms[,i] <- as.numeric(as.character(pms[,i]))}
pms[,c(3:8,10)] <- pms[,c(3:8,10)]*100
pms[,c(3:8,10)] <- pms[,c(3:8,9)]*100
pms
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
pms[,c(3:8,10)] <- pms[,c(3:8,9)]*100
View(pms)
outcomes.med[,c(3:8,9),] <- outcomes.med[,c(3:8,9),] *100
outcomes.upper[,c(3:8,9),] <- outcomes.upper[,c(3:8,9),] *100
outcomes.lower[,c(3:8,9),] <- outcomes.lower[,c(3:8,9),] *100
outcomes.med[,c(3:8,9),] <- outcomes.med[,c(3:8,9),] *100
outcomes.upper[,c(3:8,9),] <- outcomes.upper[,c(3:8,9),] *100
outcomes.lower[,c(3:8,9),] <- outcomes.lower[,c(3:8,9),] *100
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("Status quo",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("MSY",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pol.3 <- cbind(rep("Conservation",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.3x.ind,,pol.3y.ind],
outcomes.upper[pol.3x.ind,,pol.3y.ind],
outcomes.lower[pol.3x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
pms[,c(3:8,10)] <- pms[,c(3:8,9)]*100
outcomes.med[,c(3:8,9),] <- outcomes.med[,c(3:8,9),] *100
outcomes.upper[,c(3:8,9),] <- outcomes.upper[,c(3:8,9),] *100
outcomes.lower[,c(3:8,9),] <- outcomes.lower[,c(3:8,9),] *100
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("Status quo",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("MSY",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pol.3 <- cbind(rep("Conservation",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.3x.ind,,pol.3y.ind],
outcomes.upper[pol.3x.ind,,pol.3y.ind],
outcomes.lower[pol.3x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
for(i in 3:5){pms[,i] <- as.numeric(as.character(pms[,i]))}
pms[,c(3:8,10)] <- pms[,c(3:8,9)]*100
outcomes.med[,c(3:8,9),] <- outcomes.med[,c(3:8,9),] *100
outcomes.upper[,c(3:8,9),] <- outcomes.upper[,c(3:8,9),] *100
outcomes.lower[,c(3:8,9),] <- outcomes.lower[,c(3:8,9),] *100
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("Status quo",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("MSY",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pol.3 <- cbind(rep("Conservation",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.3x.ind,,pol.3y.ind],
outcomes.upper[pol.3x.ind,,pol.3y.ind],
outcomes.lower[pol.3x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
for(i in 3:5){pms[,i] <- as.numeric(as.character(pms[,i]))}
ggplot(pms,aes(x=policy, y=med))+
facet_wrap(~performance_measure, scales = "free_y")+
geom_col(fill=c(rep(c("#440154FF","#21908CFF","#FDE725FF"),9)))+
geom_errorbar(aes(ymin=lower,ymax=upper), width=0)+
xlab("Policy")+
ylab("")+
theme_bw()
---
output:
pdf_document: default
keep_tex: yes
word_document: default
html_document: default
---
##CDN-Yukon harvest-diversity simulations
`r Sys.Date()`
```{r setup, include=FALSE}
source("Load.R")
##------------------------------------------------------------------------------#
# Load functions and libraries for analysis
#------------------------------------------------------------------------------#
source("functions.R")
library(MASS)
library(mvtnorm)
library(plotrix)
library(matrixStats)
library(mgcv)
library(plyr)
library(fields)
library(gdata)
library(graphics)
library(fields)
library(dichromat)
library(grDevices)
library(viridis)
library(shape)
library(autoimage)
library(tidyverse)
library(plyr)
#------------------------------------------------------------------------------#
# Load posterior samples
#------------------------------------------------------------------------------#
samps_C = read.csv("./data/MS_SR_posteriors/Posterior_Samples_C.csv")
samps_D = read.csv("./data/MS_SR_posteriors/Posterior_Samples_D.csv")
samps_E = read.csv("./data/MS_SR_posteriors/Posterior_Samples_E.csv")
samps <- rbind(samps_C, samps_D, samps_E)
samps = as.matrix(samps)
samps = samps[,c(1:97,126:129,158:161,190:193,222:225,254:257,286:289,318:321,350:353,386:388,421:423,456:458,493:491,526:528,561:563,596:598,631:633,668,703,738,773,808,843,878,913,926:929)]
colnames(samps)[154:161] <- c("last_resid_1","last_resid_2","last_resid_3","last_resid_4","last_resid_5","last_resid_6","last_resid_7","last_resid_8")
# ---- Chose RR data to use -----------------------------------------------------------#
load("./data/runSize.Rdata")
runSize$Stock <-lapply(runSize$stock, as.character)
run_size_Carmacks <- rbind(runSize[runSize$Stock == "UpperLakesAndMainstem",],
runSize[runSize$Stock == "Teslin",],
runSize[runSize$Stock == "Carmacks",]
)
run_size_Teslin <- rbind(runSize[runSize$Stock == "Teslin",])
cv_run<- plyr::ddply(runSize, c("Stock"),function(x) {
cv <- mean(x$MLE)/sd(x$MLE)
}
data.frame(pink,sst)})
cv_run<- plyr::ddply(runSize, c("Stock"),function(x) {
cv <- mean(x$MLE)/sd(x$MLE)
}
data.frame(cv)})
cv_run<- plyr::ddply(runSize, c("Stock"),function(x) {
cv <- mean(x$MLE)/sd(x$MLE)
data.frame(cv)})
# ---- Chose RR data to use -----------------------------------------------------------#
load("./data/runSize.Rdata")
>>>>>>> 86594f96eaaa28dce2f138bd0a89c52e919a7030
runSize$Stock <-lapply(runSize$stock, as.character)
run_size_Carmacks <- rbind(runSize[runSize$Stock == "UpperLakesAndMainstem",],
runSize[runSize$Stock == "Teslin",],
runSize[runSize$Stock == "Carmacks",]
)
run_size_Teslin <- rbind(runSize[runSize$Stock == "Teslin",])
# ---- Calculate running PE and CV -----------------------------------------------------#
PE_running_avg_full <- matrix(NA, 21,1)
PE_running_avg_Carmacks <- PE_running_avg_full
CV_running_avg_full <- PE_running_avg_full
CV_running_avg_Carmacks <- PE_running_avg_full
CV_running_avg_Teslin <- PE_running_avg_full
for (i in 1:21){
PE_running_avg_full[i,] <- PE_running(runSize, 1984 + i, 1994 + i)[1]
PE_running_avg_Carmacks[i,] <- PE_running(run_size_Carmacks, 1984 + i, 1994 + i)[1]
CV_running_avg_full[i,] <- PE_running(runSize, 1984 + i, 1994 + i)[2]
CV_running_avg_Carmacks[i,] <- PE_running(run_size_Carmacks, 1984 + i, 1994 + i)[2]
CV_running_avg_Teslin[i,] <- PE_running(run_size_Teslin, 1984 + i, 1994 + i)[2]
}
<<<<<<< HEAD
knitr::opts_chunk$set(echo = TRUE)
CV_running_avg_Teslin
mean(CV_running_avg_Teslin)
mean(CV_running_avg_Carmacks)
=======
PE_running(runSize, 1984 , 2016)[1]
PE_running(runSize, 1984 , 2016)[
PE_running(runSize, 1984 , 2016)
PE_running(runSize, 1984 , 2016)
unique(runSize$stock)
CV_ind <- matrix(NA, 8,1)
for (i in unique(runSize$stock)){
CV_ind[i] <-PE_running(runSize, 1984 , 2016)[2]
}
CV_ind
runSize$stock==i
runSize[runSize$stock==i]
stock)){
CV_ind[i] <-PE_running(runSize[,runSize$stock==i]
runSize[,runSize$stock==i]
runSize[runSize$stock==i,]
for (i in unique(runSize$stock)){
CV_ind[i] <-PE_running(runSize[runSize$stock==i,], 1984 , 2016)[2]
}
CV_ind
mean(CV_ind[1,])
mean(CV_ind[2,])
mean(CV_ind[9:16])
mean(CV_ind[9:16]); sd(CV_ind[9:16])  #
PE_running(runSize, 1984 , 2016)[2]
CV_agg/CV_avg_all
CV_avg_all <- mean(CV_ind[9:16]); sd(CV_ind[9:16])  # mean and SD across individual pops
CV_agg <- PE_running(runSize, 1984 , 2016)[2] # realized CV integrated across all pops
CV_agg/CV_avg_all
CV_avg_all
CV_agg
CV_avg_all/CV_agg
>>>>>>> 86594f96eaaa28dce2f138bd0a89c52e919a7030
