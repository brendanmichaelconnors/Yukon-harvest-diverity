agg_data <- read.csv("./data/Landmark_RR/data/age_and_harvest_data.csv")
agg_data <- read.csv(".data/age_and_harvest_data.csv")
load("./data/runSize.Rdata")
agg_data <- read.csv(".data/age_and_harvest_data.csv")
agg_data <- read.csv("./data/age_and_harvest_data.csv")
saveRDS(Yukon_chinook_data_for_BS,"./oututs/Yukon_data_for_BS_July24_2019.RDS")
########################################################################################
# Yukon_data_processing_for_MSSR.R
#
# Wrangle data into format required for multi-stock SS spawner-recruit modelling
#
# Last updated: July 25, 2019
# Author: B. Connors (DFO)
#
########################################################################################
library(tidyverse)
load("./data/runSize.Rdata")
agg_data <- read.csv("./data/age_and_harvest_data.csv")
agg_data <- subset(agg_data, year>1984 & year <2017)
CDN_u <- agg_data$yk_rv_har/(agg_data$spwn+agg_data$yk_rv_har)# CDN exploitation rate
# --- set values for list ----------------------------------------------------------------------------------
ns <- 8
nt <- 32
na <- 4
a_max <- 7
C_tot_t_obs <- agg_data$total_har
tau_C_obs <- round(C_tot_t_obs*0.15)#use CV of 0.15 (SE X sqrt(n)) = SD; SD^2 = var; CV = SD/mean; SD = CV*mean
v <- rep(1,8)
S_obs <- round(runSize$MLE*(1-rep(CDN_u,8)),0)
S_obs_t <- rep(1:nt,8)
S_obs_s <- sort(rep(1:8,nt))
S_obs_n <- length(S_obs_s)
tau_S_obs <- round(runSize$SE*(1-rep(CDN_u,8)),0)
x_tas_obs <- round(agg_data[,14:17]*100); colnames(x_tas_obs) <- c("a4", "a5", "a6", "a7"); rownames(x_tas_obs) <- seq(1985,2016)
ESS_ts <- matrix(NA,32,1); ESS_ts[,1] <- (rowSums(x_tas_obs)); rownames(ESS_ts) <- seq(1985,2016); colnames(ESS_ts) <- c("aggregate"); ESS_ts <- as.data.frame(ESS_ts)
R_wish <- matrix(0,ns,ns)
diag(R_wish) <- rep(1,8)
df_wish <- 9
# --- create list ----------------------------------------------------------------------------------
Yukon_chinook_data_for_BS <- list("ns" = ns,
"nt" = nt,
"na" = na,
"a_max" = a_max,
"C_tot_t_obs" = C_tot_t_obs,
"tau_C_obs" = tau_C_obs,
"v" = v,
"S_obs" = S_obs,
"S_obs_t" = S_obs_t,
"S_obs_s" = S_obs_s,
"S_obs_n" = S_obs_n,
"tau_S_obs" = tau_S_obs,
"x_tas_obs" = x_tas_obs,
"ESS_ts" = ESS_ts,
"R_wish" = R_wish,
"df_wish" = df_wish)
saveRDS(Yukon_chinook_data_for_BS,"./oututs/Yukon_data_for_BS_July24_2019.RDS")
saveRDS(Yukon_chinook_data_for_BS,"./outputs/Yukon_data_for_BS_July24_2019.RDS")
View(runSize)
##------------------------------------------------------------------------------#
# Load functions and libraries for analysis
#------------------------------------------------------------------------------#
source("functions.R")
library(MASS)
library(mvtnorm)
library(plotrix)
library(matrixStats)
library(mgcv)
library(plyr)
library(fields)
library(gdata)
library(graphics)
library(fields)
library(dichromat)
library(grDevices)
library(viridis)
library(shape)
library(autoimage)
library(tidyverse)
library(plyr)
#------------------------------------------------------------------------------#
# Load posterior samples
#------------------------------------------------------------------------------#
samps = read.csv("./data/MS_SR_posteriors/Posterior_Samples_base_S_trunc.csv")
samps = as.matrix(samps)
########################################################################################
# YT_close_loop_sims.R
#
# Closed-loop simulation of alternative harvest policies for CDN-Yukon Chinook
# July 24, 2019
# Author: B. Connors (DFO)
#
########################################################################################
# --- Set common conditions for simulations  --------------------------------------------
num.sims <- 10 # number of Monte Carlo trials
ny <- 50 # number of years in forward simulation
pm.yr <- ny-20
US_sub <- 30000 # US subsistence target
CDN_sub <- 15000 # CDN basic needs allocation target
for_error <- 0.2 # log-normal forecast error
US_com_error <- 0.1 # log-normal outcome uncertianty in US commerical harvest
US_sub_error <- 0.05 # log-normal outcome uncertianty in US subsistence harvest
BP_error <- 0.05 # log-normal border passage measurement error
CDN_sub_error <- 0.05 # log-normal outcome uncertianty in CDN FN harvest
t_harvest_rate <- seq(0,1,length.out=40) # range of US target commercial harvest rates
BPG <- seq(1,100000,length.out=40) # range of border passage goals
# --- Create array to store outcomes ----------------------------------------------------
sim.outcomes <- array(NA,dim=c(length(BPG),10, length(t_harvest_rate),num.sims))
sim.outcomes.spw.time <- array(NA,dim=c(ny,8,length(BPG),length(t_harvest_rate),num.sims))
# --- Stationary Ricker SR dynamics ----------------------------------------------------
# set structural form of SR relationship
SR_rel <-  "Ricker"
#dir.SR <- "F"
#SR_devs <- array(1,dim=c(ny,2,13))
# run simulations
ptm <- proc.time()
w<-1
k<-1
l<-1
draw <- sample(10000,1)
ny
process.iteration(samps[draw,])$Sigma_R
process.iteration(samps[draw,])$phi
process.iteration(samps[draw,])$pis
BPG[k]
process.iteration(samps[draw,])$R * 1000
process
source("functions.R")
# --- Set common conditions for simulations  --------------------------------------------
num.sims <- 10 # number of Monte Carlo trials
ny <- 50 # number of years in forward simulation
pm.yr <- ny-20
US_sub <- 30000 # US subsistence target
CDN_sub <- 15000 # CDN basic needs allocation target
for_error <- 0.2 # log-normal forecast error
US_com_error <- 0.1 # log-normal outcome uncertianty in US commerical harvest
US_sub_error <- 0.05 # log-normal outcome uncertianty in US subsistence harvest
BP_error <- 0.05 # log-normal border passage measurement error
CDN_sub_error <- 0.05 # log-normal outcome uncertianty in CDN FN harvest
t_harvest_rate <- seq(0,1,length.out=40) # range of US target commercial harvest rates
BPG <- seq(1,100000,length.out=40) # range of border passage goals
# --- Create array to store outcomes ----------------------------------------------------
sim.outcomes <- array(NA,dim=c(length(BPG),10, length(t_harvest_rate),num.sims))
sim.outcomes.spw.time <- array(NA,dim=c(ny,8,length(BPG),length(t_harvest_rate),num.sims))
# --- Stationary Ricker SR dynamics ----------------------------------------------------
# set structural form of SR relationship
SR_rel <-  "Ricker"
#dir.SR <- "F"
#SR_devs <- array(1,dim=c(ny,2,13))
# run simulations
ptm <- proc.time()
for (w in 1:length(t_harvest_rate)){
for (k in 1:length(BPG)){
for (l in 1: num.sims){
draw <- sample(10000,1)
out <- process(ny = ny,
vcov.matrix = process.iteration(samps[draw,])$Sigma_R,
phi = process.iteration(samps[draw,])$phi,
mat = process.iteration(samps[draw,])$pis,
alpha = process.iteration(samps[draw,])$alpha,
beta = process.iteration(samps[draw,])$beta / 1000,
BPG = BPG[k],
pm.yr = pm.yr,
Rec = process.iteration(samps[draw,])$R * 1000,
Spw = process.iteration(samps[draw,])$S * 1000,
lst.resid = process.iteration(samps[draw,])$last_resid,
SR_rel = SR_rel,
t_harvest_rate = t_harvest_rate[w])
sim.outcomes[k,,w,l] <- out$PMs
sim.outcomes.spw.time[,,k,w,l] <- out$S
}
}
}
saveRDS(sim.outcomes,"./outputs/base_sims.ricker")
saveRDS(sim.outcomes.spw.time,"./outputs/base_sims_projections.ricker")
# set harvest rate and border passage goals for alternative policies
t_harvest_rate <- seq(0,1,length.out=40) # range of US target commercial harvest rates
BPG <- seq(1,100000,length.out=40) # range of border passage goals
pol.1x<-45000; pol.1x.ind <- which(abs((BPG)-pol.1x)==min(abs((BPG)-pol.1x)))
pol.1y<-0.2; pol.1y.ind <- which(abs((t_harvest_rate)-pol.1y)==min(abs((t_harvest_rate)-pol.1y)))
pol.2x<-20000; pol.2x.ind <- which(abs((BPG)-pol.2x)==min(abs((BPG)-pol.2x)))
pol.2y<-0.8; pol.2y.ind <- which(abs((t_harvest_rate)-pol.2y)==min(abs((t_harvest_rate)-pol.2y)))
# load simulation output
outcomes <- readRDS("./outputs/base_sims.ricker")
outcomes.med <- apply(outcomes,c(1,2,3),quantile,probs=c(0.5),na.rm=T)
outcomes.upper <- apply(outcomes,c(1,2,3),quantile,probs=c(0.75),na.rm=T)
outcomes.lower <- apply(outcomes,c(1,2,3),quantile,probs=c(0.25),na.rm=T)
# a 40 x 10 x 40 array (BPG x PMs X Target_us_harvest)
par(mfrow=c(3,3),bty="o", mar=c(2,2,2,5),oma=c(2,2,1,1))
# panel a - escapement
xx<-as.table((outcomes.med[,1,]/1000))
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000), y = (t_harvest_rate)))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="",col=rev(viridis(100)))
axis(1,labels=F)
axis(2,las=2)
mtext("(a) Escapement (000s fish)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
#panel b - harvest
xx<-as.table((outcomes.med[,2,]/1000))
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000), y = (t_harvest_rate)))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="",col=rev(viridis(100)))
axis(1,labels=F)
axis(2,las=2,labels=F)
mtext("(b) Harvest (000s fish)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
#panel c - harvest rate
xx<-as.table(outcomes.med[,3,]*100)
colnames(xx)<-((t_harvest_rate) )
rownames(xx)<-((BPG/1000) )
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,labels=F)
axis(2,las=2,labels=F)
mtext("(c) Harvest rate (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
#panel d - overfished
xx<-as.table(outcomes.med[,4,]*100)
colnames(xx)<-((t_harvest_rate) )
rownames(xx)<-((BPG/1000) )
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1,labels=F)
axis(2,las=2)
mtext("(d) Stocks overfished (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
#panel e - extirpated
xx<-as.table(outcomes.med[,6,]*100)
colnames(xx)<-((t_harvest_rate) )
rownames(xx)<-((BPG/1000) )
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1,labels=F)
axis(2,las=2,labels=F)
mtext("(e) Populations extirpated (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=viridis(100),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
#panel f - CV
xx<-as.table(1/outcomes.med[,9,])
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1,at=c(0,40,80,120,160),labels=F)
axis(2,las=2,labels=F)
mtext("(f) Harvest stability (1/CV)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
#panel g - meet CDN FN needs
xx<-as.table(outcomes.med[,8,]*100)
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1)
axis(2,las=2)
mtext("(g) Chances CDN FN harvest met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
#panel h - meet US sub needs
xx<-as.table(outcomes.med[,7,]*100)
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1)
axis(2,las=2,labels=F)
mtext("(h) Chances US subsistence met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
#panel i - trib goals
xx<-as.table(outcomes.med[,10,]*100)
colnames(xx)<-((t_harvest_rate) )
rownames(xx)<-((BPG/1000) )
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1)
axis(2,las=2, labels = F)
mtext("(i) Chance tributary goals met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
mtext("Border passage goal (000s)",1,outer=T,cex=1.1,lin=0.75)
mtext("US commercial harvest rate (%)",side=2,outer=T,cex=1.1,line=0.75)
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("pol_1",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Trib. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("pol_2",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Trib. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
for(i in 3:5){pms[,i] <- as.numeric(as.character(pms[,i]))}
ggplot(pms,aes(x=policy, y=med))+
facet_wrap(~performance_measure, scales = "free_y")+
geom_col(fill=c(rep(c("#440154FF","#FDE725FF"),9)))+
geom_errorbar(aes(ymin=lower,ymax=upper), width=0)+
xlab("Policy")+
ylab("")+
theme_bw()
load("./data/runSize.Rdata")
rr_data <-load("./data/runSize.Rdata")
data <- rr_data
first_year <- 1985
last_year <- 2015
rs_data <- data
rs <- subset(rs_data,year>= first_year & year<last_year)
rs_data
rr_data <-load("./data/runSize.Rdata")
data <- rr_data
data
rr_data <-readRDS("./data/runSize.Rdata")
rr_data <- matrix(NA,256,3)
rr_data[,1] <- stock
View(runSize)
rr_data[,1] <- runSize
rr_data[,1]
rr_data <- runSize
rr_data
data <- rr_data
first_year <- 1985
last_year <- 2015
rs_data <- data
rs <- subset(rs_data,year>= first_year & year<last_year)
rs
pop_CV <- ddply(rs,c("stock"),function(x){
abund<-sum(x$Total.run,na.rm=T)
CV <-sd(x$Total.run,na.rm=T)/mean(x$Total.run,na.rm=T)
data.frame(abund, CV)
})
library(MASS)
library(mvtnorm)
library(plotrix)
library(matrixStats)
library(mgcv)
library(plyr)
library(fields)
library(gdata)
library(graphics)
library(fields)
library(dichromat)
library(grDevices)
library(viridis)
library(shape)
library(autoimage)
library(tidyverse)
library(plyr)
pop_CV <- ddply(rs,c("stock"),function(x){
abund<-sum(x$Total.run,na.rm=T)
CV <-sd(x$Total.run,na.rm=T)/mean(x$Total.run,na.rm=T)
data.frame(abund, CV)
})
pop_CV <- ddply(rs,c("stock"),function(x){
CV <-sd(x$MLE,na.rm=T)/mean(x$MLE,na.rm=T)
data.frame(CV)
})
pop_CV
total.esc <- ddply(rs,c("year"),function(x){
total.esc<-sum(x$MLE,na.rm=T)
data.frame(total.esc)
})
CV_all<-sd(total.esc$total.esc)/mean(total.esc$total.esc)
CV_all
PE.comp <- PE[complete.cases(PE),]
PE.comp <- pop_CV[complete.cases(pop_CV),]
PE_all <- sum(PE.comp$abund/sum(PE.comp$abund)* PE.comp$CV) - CV_all
PE_all
PE.comp
PE.comp$abund
rs_data <- data
rs <- subset(rs_data,year>= first_year & year<last_year)
pop_CV <- ddply(rs,c("stock"),function(x){
CV <-sd(x$MLE,na.rm=T)/mean(x$MLE,na.rm=T)
abund<-sum(x$MLE,na.rm=T)
data.frame(CV,abund)
})
total.esc <- ddply(rs,c("year"),function(x){
total.esc<-sum(x$MLE,na.rm=T)
data.frame(total.esc)
})
CV_all<-sd(total.esc$total.esc)/mean(total.esc$total.esc)
PE.comp <- pop_CV[complete.cases(pop_CV),]
PE.comp
PE.comp$abund
PE_all <- sum(PE.comp$abund/sum(PE.comp$abund)* PE.comp$CV) - CV_all
PE_all
