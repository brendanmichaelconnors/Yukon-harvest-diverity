long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1,labels=F)
axis(2,las=2)
mtext("(d) Stocks overfished (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel e - extirpated
xx<-as.table(outcomes.med[,6,]*100)
colnames(xx)<-((t_harvest_rate) )
rownames(xx)<-((BPG/1000) )
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1,labels=F)
axis(2,las=2,labels=F)
mtext("(e) Populations extirpated (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=viridis(100),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel f - CV
xx<-as.table(1/outcomes.med[,9,])
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1,at=c(0,40,80,120,160),labels=F)
axis(2,las=2,labels=F)
mtext("(f) Harvest stability (1/CV)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel g - meet CDN FN needs
xx<-as.table(outcomes.med[,8,]*100)
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1)
axis(2,las=2)
mtext("(g) Chances CDN FN harvest met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel h - meet US sub needs
xx<-as.table(outcomes.med[,7,]*100)
colnames(xx)<-((t_harvest_rate))
rownames(xx)<-((BPG/1000))
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
image(xx,yy,zz,axes=F,ylab="",xlab="")
axis(1)
axis(2,las=2,labels=F)
mtext("(h) Chances US subsistence met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=2.2,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
#panel i - trib goals
xx<-as.table(outcomes.med[,10,]*100)
colnames(xx)<-((t_harvest_rate) )
rownames(xx)<-((BPG/1000) )
long.data <- as.data.frame(xx)
x <- as.numeric(paste(long.data[,1]))
y <- as.numeric(paste(long.data[,2]))
z <-as.numeric(long.data[,3])
data.loess = loess(z~x*y)
grid = expand.grid(list(x = (BPG/1000) , y = (t_harvest_rate) ))
zz<-as.matrix(predict(data.loess, newdata = grid))
xx<-(BPG/1000)
yy<-(t_harvest_rate)
zz[zz <0] =0
zz[zz >100] =100
image(xx,yy,zz,axes=F,ylab="",xlab="",zlim=c(0,100))
axis(1,las=1)
axis(2,las=2, labels = F)
mtext("(i) Chance tributary goals met (%)",3,cex=0.9,line=0.5,adj=0)
image.plot(xx,yy,zz,axes=F,add=T,legend.mar=3,zlim=c(0,100),col=rev(viridis(100)),legend.width = 2)
box(col="black")
points(pol.1x/1000,pol.1y,pch=21,cex=2.5,bg="grey",lwd=2)
text(pol.1x/1000,pol.1y,"1",cex=0.8)
points(pol.2x/1000,pol.2y,pch=21,cex=2.8,bg="grey",lwd=2)
text(pol.2x/1000,pol.2y,"2",cex=0.8)
points(pol.3x/1000,pol.3y,pch=21,cex=3,bg="grey",lwd=2)
text(pol.3x/1000,pol.3y,"3",cex=0.8)
mtext("Escapement goal (000s)",1,outer=T,cex=1.1,lin=0.75)
mtext("Harvest rate on surplus (%)",side=2,outer=T,cex=1.1,line=0.75)
source("Load.R")
# set harvest rate and border passage goals for alternative policies
t_harvest_rate <- seq(0,1,length.out=40) # range of US target commercial harvest rates
BPG <- seq(1,100000,length.out=40) # range of border passage goals
pol.1x<-48750; pol.1x.ind <- which(abs((BPG)-pol.1x)==min(abs((BPG)-pol.1x)))
pol.1y<-0.2; pol.1y.ind <- which(abs((t_harvest_rate)-pol.1y)==min(abs((t_harvest_rate)-pol.1y)))
pol.2x<-50000; pol.2x.ind <- which(abs((BPG)-pol.2x)==min(abs((BPG)-pol.2x)))
pol.2y<-0.98; pol.2y.ind <- which(abs((t_harvest_rate)-pol.2y)==min(abs((t_harvest_rate)-pol.2y)))
pol.3x<-85000; pol.3x.ind <- which(abs((BPG)-pol.3x)==min(abs((BPG)-pol.3x)))
pol.3y<-0.8; pol.3y.ind <- which(abs((t_harvest_rate)-pol.3y)==min(abs((t_harvest_rate)-pol.3y)))
# load simulation output
outcomes <- readRDS("./outputs/base_sims.ricker")
outcomes.med <- apply(outcomes,c(1,2,3),quantile,probs=c(0.5),na.rm=T)
outcomes.upper <- apply(outcomes,c(1,2,3),quantile,probs=c(0.75),na.rm=T)
outcomes.lower <- apply(outcomes,c(1,2,3),quantile,probs=c(0.25),na.rm=T)
# a 40 x 10 x 40 array (BPG x PMs X Target_us_harvest)
pms
source("Load.R")
# set harvest rate and border passage goals for alternative policies
t_harvest_rate <- seq(0,1,length.out=40) # range of US target commercial harvest rates
BPG <- seq(1,100000,length.out=40) # range of border passage goals
pol.1x<-48750; pol.1x.ind <- which(abs((BPG)-pol.1x)==min(abs((BPG)-pol.1x)))
pol.1y<-0.2; pol.1y.ind <- which(abs((t_harvest_rate)-pol.1y)==min(abs((t_harvest_rate)-pol.1y)))
pol.2x<-50000; pol.2x.ind <- which(abs((BPG)-pol.2x)==min(abs((BPG)-pol.2x)))
pol.2y<-0.98; pol.2y.ind <- which(abs((t_harvest_rate)-pol.2y)==min(abs((t_harvest_rate)-pol.2y)))
pol.3x<-85000; pol.3x.ind <- which(abs((BPG)-pol.3x)==min(abs((BPG)-pol.3x)))
pol.3y<-0.8; pol.3y.ind <- which(abs((t_harvest_rate)-pol.3y)==min(abs((t_harvest_rate)-pol.3y)))
# load simulation output
outcomes <- readRDS("./outputs/base_sims.ricker")
outcomes.med <- apply(outcomes,c(1,2,3),quantile,probs=c(0.5),na.rm=T)
outcomes.upper <- apply(outcomes,c(1,2,3),quantile,probs=c(0.75),na.rm=T)
outcomes.lower <- apply(outcomes,c(1,2,3),quantile,probs=c(0.25),na.rm=T)
# a 40 x 10 x 40 array (BPG x PMs X Target_us_harvest)
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("Status quo",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("MSY",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pol.3 <- cbind(rep("Conservation",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.3x.ind,,pol.3y.ind],
outcomes.upper[pol.3x.ind,,pol.3y.ind],
outcomes.lower[pol.3x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
for(i in 3:5){pms[,i] <- as.numeric(as.character(pms[,i]))}
pms[,c(3:8,10)] <- pms[,c(3:8,10)]*100
pms[,c(3:8,10)] <- pms[,c(3:8,9)]*100
pms
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
pms[,c(3:8,10)] <- pms[,c(3:8,9)]*100
View(pms)
outcomes.med[,c(3:8,9),] <- outcomes.med[,c(3:8,9),] *100
outcomes.upper[,c(3:8,9),] <- outcomes.upper[,c(3:8,9),] *100
outcomes.lower[,c(3:8,9),] <- outcomes.lower[,c(3:8,9),] *100
outcomes.med[,c(3:8,9),] <- outcomes.med[,c(3:8,9),] *100
outcomes.upper[,c(3:8,9),] <- outcomes.upper[,c(3:8,9),] *100
outcomes.lower[,c(3:8,9),] <- outcomes.lower[,c(3:8,9),] *100
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("Status quo",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("MSY",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pol.3 <- cbind(rep("Conservation",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.3x.ind,,pol.3y.ind],
outcomes.upper[pol.3x.ind,,pol.3y.ind],
outcomes.lower[pol.3x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
pms[,c(3:8,10)] <- pms[,c(3:8,9)]*100
outcomes.med[,c(3:8,9),] <- outcomes.med[,c(3:8,9),] *100
outcomes.upper[,c(3:8,9),] <- outcomes.upper[,c(3:8,9),] *100
outcomes.lower[,c(3:8,9),] <- outcomes.lower[,c(3:8,9),] *100
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("Status quo",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("MSY",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pol.3 <- cbind(rep("Conservation",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.3x.ind,,pol.3y.ind],
outcomes.upper[pol.3x.ind,,pol.3y.ind],
outcomes.lower[pol.3x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
for(i in 3:5){pms[,i] <- as.numeric(as.character(pms[,i]))}
pms[,c(3:8,10)] <- pms[,c(3:8,9)]*100
outcomes.med[,c(3:8,9),] <- outcomes.med[,c(3:8,9),] *100
outcomes.upper[,c(3:8,9),] <- outcomes.upper[,c(3:8,9),] *100
outcomes.lower[,c(3:8,9),] <- outcomes.lower[,c(3:8,9),] *100
# extract two constrasting policies and associated PMs
pol.1 <- cbind(rep("Status quo",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.1x.ind,,pol.1y.ind],
outcomes.upper[pol.1x.ind,,pol.1y.ind],
outcomes.lower[pol.1x.ind,,pol.1y.ind])
pol.2 <- cbind(rep("MSY",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.2x.ind,,pol.2y.ind],
outcomes.upper[pol.2x.ind,,pol.2y.ind],
outcomes.lower[pol.2x.ind,,pol.2y.ind])
pol.3 <- cbind(rep("Conservation",10),
c("Escapement",
"Harvest",
"Harvest rate",
"Overfished (%)",
"% pred. extrinct",
"Extirpated (%)",
"Chances US subsistence met (%)",
"Chances CDN FN harvest met (%)",
"Harvest stability (1/CV)",
"Pop. goals met (%)"),
outcomes.med[pol.3x.ind,,pol.3y.ind],
outcomes.upper[pol.3x.ind,,pol.3y.ind],
outcomes.lower[pol.3x.ind,,pol.2y.ind])
pms <- as.data.frame(rbind(pol.1[-5,],pol.2[-5,],pol.3[-5,]))
colnames(pms)<-c("policy","performance_measure","med","upper","lower")
for(i in 3:5){pms[,i] <- as.numeric(as.character(pms[,i]))}
ggplot(pms,aes(x=policy, y=med))+
facet_wrap(~performance_measure, scales = "free_y")+
geom_col(fill=c(rep(c("#440154FF","#21908CFF","#FDE725FF"),9)))+
geom_errorbar(aes(ymin=lower,ymax=upper), width=0)+
xlab("Policy")+
ylab("")+
theme_bw()
---
output:
pdf_document: default
keep_tex: yes
word_document: default
html_document: default
---
##CDN-Yukon harvest-diversity simulations
`r Sys.Date()`
```{r setup, include=FALSE}
source("Load.R")
##------------------------------------------------------------------------------#
# Load functions and libraries for analysis
#------------------------------------------------------------------------------#
source("functions.R")
library(MASS)
library(mvtnorm)
library(plotrix)
library(matrixStats)
library(mgcv)
library(plyr)
library(fields)
library(gdata)
library(graphics)
library(fields)
library(dichromat)
library(grDevices)
library(viridis)
library(shape)
library(autoimage)
library(tidyverse)
library(plyr)
#------------------------------------------------------------------------------#
# Load posterior samples
#------------------------------------------------------------------------------#
samps_C = read.csv("./data/MS_SR_posteriors/Posterior_Samples_C.csv")
samps_D = read.csv("./data/MS_SR_posteriors/Posterior_Samples_D.csv")
samps_E = read.csv("./data/MS_SR_posteriors/Posterior_Samples_E.csv")
samps <- rbind(samps_C, samps_D, samps_E)
samps = as.matrix(samps)
samps = samps[,c(1:97,126:129,158:161,190:193,222:225,254:257,286:289,318:321,350:353,386:388,421:423,456:458,493:491,526:528,561:563,596:598,631:633,668,703,738,773,808,843,878,913,926:929)]
colnames(samps)[154:161] <- c("last_resid_1","last_resid_2","last_resid_3","last_resid_4","last_resid_5","last_resid_6","last_resid_7","last_resid_8")
# ---- Chose RR data to use -----------------------------------------------------------#
load("./data/runSize.Rdata")
runSize$Stock <-lapply(runSize$stock, as.character)
run_size_Carmacks <- rbind(runSize[runSize$Stock == "UpperLakesAndMainstem",],
runSize[runSize$Stock == "Teslin",],
runSize[runSize$Stock == "Carmacks",]
)
run_size_Teslin <- rbind(runSize[runSize$Stock == "Teslin",])
cv_run<- plyr::ddply(runSize, c("Stock"),function(x) {
cv <- mean(x$MLE)/sd(x$MLE)
}
data.frame(pink,sst)})
cv_run<- plyr::ddply(runSize, c("Stock"),function(x) {
cv <- mean(x$MLE)/sd(x$MLE)
}
data.frame(cv)})
cv_run<- plyr::ddply(runSize, c("Stock"),function(x) {
cv <- mean(x$MLE)/sd(x$MLE)
data.frame(cv)})
# ---- Chose RR data to use -----------------------------------------------------------#
load("./data/runSize.Rdata")
runSize$Stock <-lapply(runSize$stock, as.character)
run_size_Carmacks <- rbind(runSize[runSize$Stock == "UpperLakesAndMainstem",],
runSize[runSize$Stock == "Teslin",],
runSize[runSize$Stock == "Carmacks",]
)
run_size_Teslin <- rbind(runSize[runSize$Stock == "Teslin",])
# ---- Calculate running PE and CV -----------------------------------------------------#
PE_running_avg_full <- matrix(NA, 21,1)
PE_running_avg_Carmacks <- PE_running_avg_full
CV_running_avg_full <- PE_running_avg_full
CV_running_avg_Carmacks <- PE_running_avg_full
CV_running_avg_Teslin <- PE_running_avg_full
for (i in 1:21){
PE_running_avg_full[i,] <- PE_running(runSize, 1984 + i, 1994 + i)[1]
PE_running_avg_Carmacks[i,] <- PE_running(run_size_Carmacks, 1984 + i, 1994 + i)[1]
CV_running_avg_full[i,] <- PE_running(runSize, 1984 + i, 1994 + i)[2]
CV_running_avg_Carmacks[i,] <- PE_running(run_size_Carmacks, 1984 + i, 1994 + i)[2]
CV_running_avg_Teslin[i,] <- PE_running(run_size_Teslin, 1984 + i, 1994 + i)[2]
}
PE_running(runSize, 1984 , 2016)[1]
PE_running(runSize, 1984 , 2016)[
PE_running(runSize, 1984 , 2016)
PE_running(runSize, 1984 , 2016)
unique(runSize$stock)
CV_ind <- matrix(NA, 8,1)
for (i in unique(runSize$stock)){
CV_ind[i] <-PE_running(runSize, 1984 , 2016)[2]
}
CV_ind
runSize$stock==i
runSize[runSize$stock==i]
stock)){
CV_ind[i] <-PE_running(runSize[,runSize$stock==i]
runSize[,runSize$stock==i]
runSize[runSize$stock==i,]
for (i in unique(runSize$stock)){
CV_ind[i] <-PE_running(runSize[runSize$stock==i,], 1984 , 2016)[2]
}
CV_ind
mean(CV_ind[1,])
mean(CV_ind[2,])
mean(CV_ind[9:16])
mean(CV_ind[9:16]); sd(CV_ind[9:16])  #
PE_running(runSize, 1984 , 2016)[2]
CV_agg/CV_avg_all
CV_avg_all <- mean(CV_ind[9:16]); sd(CV_ind[9:16])  # mean and SD across individual pops
CV_agg <- PE_running(runSize, 1984 , 2016)[2] # realized CV integrated across all pops
CV_agg/CV_avg_all
CV_avg_all
CV_agg
CV_avg_all/CV_agg
